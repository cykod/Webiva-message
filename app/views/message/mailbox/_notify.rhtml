<% unless ajax || editor -%>
<script>

WindowJar = new CookieJar({
expires:3600,   // seconds
path: '/'
});
 


MessageNotify = {

  activeChats: [],
  closedChats: [],
  timer: null,
  window_id: <%= window_id %>,
  request_id: 0,
  timer_inc: 1000,
  message_delay: 10000,

  createChatWindow: function(chat_id) {
    var elm = Element.remove($('chat_window_' + chat_id));
    document.body.insertBefore(elm,$('overDiv'));
    
    $('chat_window_' + chat_id).absolutize();
    $('chat_window_' + chat_id).style.zIndex=1000;
    new Draggable('chat_window_' + chat_id,{ 
            handle: 'chat_header_' + chat_id, 
            onEnd: function() { MessageNotify.updateSize(chat_id); 
          } });
    new Resizeable('chat_window_' + chat_id,'chat_body_' + chat_id,{ 
            handle: 'chat_resizer_' + chat_id,
            onEnd: function() { MessageNotify.updateSize(chat_id); },
            minWidth: 150,
            minHeight: 200
           });
          
    MessageNotify.activeChats.push(chat_id);

    $('chat_window_' + chat_id).style.display = '';
     
    $('chat_body_' + chat_id).scrollTop =  $('chat_body_' + chat_id).scrollHeight;
    
    var pos = WindowJar.get(chat_id);
    if(pos) {
      $('chat_window_' + chat_id).style.left = pos.x + 'px';
      $('chat_window_' + chat_id).style.top = pos.y + 'px';
      $('chat_window_' + chat_id).style.height = pos.wh + "px";
      $('chat_window_' + chat_id).style.width = pos.ww + "px";
      $('chat_body_' + chat_id).style.height = pos.bh + "px";
    }
    else {
      $('chat_window_' + chat_id).style.left = '0px';
      $('chat_window_' + chat_id).style.top = '0px';
    
    }

    $('chat_window_' + chat_id).style.visibility = 'visible';
  },
  
  updateSize: function(chat_id) {
    var window_pos = $('chat_window_' + chat_id).viewportOffset();
    var pos = { wh: $('chat_window_' + chat_id).getHeight(),
                ww: $('chat_window_' + chat_id).getWidth(),
                bh: $('chat_body_' + chat_id).getHeight(),
                x: window_pos.left,
                y: window_pos.top
              };
    WindowJar.put(chat_id,pos);
  },
  

  sendMessage: function(chat_id) {
    var msg = $("chat_field_" + chat_id).value;
    $("chat_field_" + chat_id).value = '';

    MessageNotify.reloadWindow({chat_id: chat_id, message: msg});
  },
  
  chat: function(user_id) {
    new Ajax.Request("<%= ajax_url_for(renderer) %>",{
            parameters: "new_chat=" + user_id, onComplete: function(req) { 
            Element.insert(document.body,{ top: req.responseText});
            } });
  },
  
  addMessage: function(cls,chat_id,name,time,msg,notification) {
    if(time)
     time = " <i>(" + time + ")</i> ";
    else
      time = "";
    var chat_body = $('chat_body_' + chat_id);
    
    var at_bottom = chat_body.scrollTop >= chat_body.scrollHeight - $('chat_body_' + chat_id).getHeight() - 5; 
    
    var full_msg = "<div class='" + cls + "'>";
    
    if(notification)
      full_msg += time + "<b>" + name + " " + msg + "</b>" + "</div>";
    else
      full_msg += time + "<b>" + name + "</b> :  " + msg + "</div>";
      
   chat_body.insert({ bottom: full_msg });
    
    if(at_bottom)  chat_body.scrollTop = chat_body.scrollHeight;
    
    MessageNotify.message_delay = 10000;
    MessageNotify.timer_inc = 1000;
  },
  
  
  reloadWindow: function(params) { 
    if(Object.isUndefined(params)) 
      params = {};
      
    params = Object.toQueryString({ window_id: MessageNotify.window_id, 'active_chats[]': MessageNotify.activeChats, 'closed_chats[]': MessageNotify.closedChats }) + "&" + Object.toQueryString(params);
    
    this.closedChats = [];
    
    MessageNotify.message_delay += MessageNotify.timer_inc ;
    MessageNotify.timer_inc += 3000;
    if(MessageNotify.message_delay > 60000)
      MessageNotify.message_delay = 60000;
      
    if(MessageNotify.timer) clearTimeout(MessageNotify.timer);
    MessageNotify.timer = null;
    new Ajax.Request( "<%= ajax_url_for(renderer) %>", //"notify_<%= paragraph.id %>",
                    {  parameters: params, //evalScripts:true,
                       onSuccess: function(req) {
                       if(MessageNotify.timer) clearTimeout(MessageNotify.timer);
                       MessageNotify.timer = setTimeout(function() { MessageNotify.reloadWindow(); },MessageNotify.message_delay);
                       req.responseText.evalScripts();
                    }});
  },
  
  closeWindow: function(chat_id) {
    this.activeChats = this.activeChats.without(chat_id);
    this.closedChats.push(chat_id);
    Element.remove('chat_window_' + chat_id);
    MessageNotify.reloadWindow({ close: true});
  
  }
  
  
}

</script>

<% end -%>

<% unless ajax -%>
<div id='notify_<%= paragraph.id %>'>
<% end %>

<%= feature %>
<% chats.each do |chat| -%>
  <%= render :partial => '/message/mailbox/chat_window', :locals => { :chat => chat } %>
<% end -%>
<script>
<% new_messages.each do |msg| -%>
 MessageNotify.addMessage("<%= msg.end_user_id == myself.id ? 'chat_message chat_message_self' : 'chat_message chat_message_other' %>",<%= msg.message_chat_id %>,"<%= jh(h(msg.end_user.name)) %>","<%= jh msg.created_at.strftime("%I:%M %p") %>","<%= jh(h(msg.message)) %>",<%= msg.notification? ? 'true' : 'false' %>);
<% end -%>
</script>

<% unless ajax -%>
</div>
<% unless editor -%>
<script>MessageNotify.timer = setTimeout(function() { MessageNotify.reloadWindow() }, 10000);</script>
<% end -%>
<% end -%>

